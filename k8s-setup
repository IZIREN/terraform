#!/usr/bin/env ruby
# erbaform: a script for processing Terraform files with ERB
#

require "optparse"
require "erb"
require "logger"
require "ostruct"
require "fileutils"

$log = Logger.new(STDOUT)
$log.level = Logger::INFO
$log.datetime_format = "%H:%M:%S"

FILENAME = File.basename($PROGRAM_NAME, File.extname($PROGRAM_NAME)).freeze
VERSION = "1.0".freeze

RED = "\033[33;31m".freeze
GREEN = "\033[33;32m".freeze
YELLOW = "\033[33;33m".freeze
BLUE = "\033[33;34m".freeze
MAGENTA = "\033[33;35m".freeze
GRAY = "\033[33;30m".freeze
CYAN = "\033[33;36m".freeze
RESET = "\e[0m".freeze

def debug(msg)
  $log.debug("#{YELLOW}#{msg}#{RESET}")
end

def info(msg)
  $log.info("#{GREEN}#{msg}#{RESET}")
end

def abort(msg)
  $log.fatal("#{RED}#{msg}#{RESET}")
  exit(1)
end

class Variables < OpenStruct
  # true if the variable has already been defined
  def exists?(k)
    self[k] != nil
  end

  # set a variable
  def set(k, v)
    return if k.nil? || v.nil? || k.empty? || v.empty?
    # try to convert the string to some "better" type
    begin
      self[k] = v.is_a?(Integer) ? Integer(v) : v.to_bool
    rescue ArgumentError
      self[k] = v
    end
  end

  # add a variable from a line like `variable=value`
  def set_line(var_line, overwrite = false)
    k, v = var_line.split("=")
    k = k.strip.tr('"', "")
    v = v.strip.tr('"', "")
    return if exists?(k) && !overwrite
    debug("new variable: '#{k}' = #{v}")
    set(k, v)
  end

  # render the template, providing some optional, extra variables
  def render(template, **extra)
    cp = clone
    extra.each { |k, v| cp.set(k, v) }
    full_path = File.expand_path(template)
    Dir.chdir(File.dirname(full_path)) do
      begin
        contents = File.read(full_path)
        ERB.new(contents).result(cp.instance_eval { binding })
      rescue SyntaxError, NameError => e
        abort("when processing #{full_path}: #{e}")
      end
    end
  end
end

$vars = Variables.new(nil)

class String
  def to_bool
    unless empty?
      return true   if self == true   || self =~ /^(true|t|yes|y|1)$/i
      return false  if self == false  || empty? || self =~ /^(false|f|no|n|0)$/i
    end
    raise ArgumentError, "invalid value for Boolean: \"#{self}\""
  end
end

# find an executable in the PATH
def which(cmd)
  ENV["PATH"].split(File::PATH_SEPARATOR).each do |path|
    exe = File.join(path, cmd)
    return exe if File.executable?(exe) && !File.directory?(exe)
  end
end

############################
# main
############################

$vars_filenames = []
$terraform_path = nil
$work_dir       = nil

info("#{FILENAME} #{VERSION}")

OptionParser.new do |parser|
  parser.on("-pPROVIDER", "--provider=PROVIDER", "The provider to use") do |provider|
    $vars["provider"] = provider
  end
  parser.on("-tPATH", "--terraform=PATH", "The terraform executable") do |tp|
    $terraform_path = tp
  end
  parser.on("-VVAR", "--var=VAR", "A variable to define") do |vl|
    $vars.set_line(vl)
  end
  parser.on("-FFILE", "--vars-file=FILE", "A file with variables") do |f|
    $vars_filenames << f
  end
  parser.on("-WDIR", "--work-dir=DIR", "The working directory") do |w|
    $work_dir = w
  end
  parser.on_tail("-v", "--verbose", "Be verbose") do
    $log.level = Logger::DEBUG
  end
end.parse!

$vars_filenames.each do |vars_filename|
  info("loading #{vars_filename}")
  File.open(vars_filename) do |vars_file|
    vars_file.each do |var_line|
      var_line.chomp!
      next if var_line.start_with?("#")
      next if var_line.empty?
      $vars.set_line(var_line)
    end
  end
end

$terraform_path = which("terraform") if $terraform_path.nil?
abort "terraform path not provided and could not be found in PATH." if $terraform_path.nil?
debug("terraform from = #{$terraform_path}")

abort "no 'provider' provided." unless $vars.exists?("provider")

terraforms_dir   = File.join(Dir.pwd, "terraform")
work_dir         = terraforms_dir + ".tfstate"
all_tfs_filename = File.join(work_dir, "all.tf")
debug("source dir     = #{terraforms_dir}")
debug("work dir       = #{work_dir}")
debug("all TFs file   = #{all_tfs_filename}")
abort "#{terraforms_dir} directory does not exist." unless File.directory?(terraforms_dir)

info("generating Terraform files")
dirname = File.dirname(all_tfs_filename)
FileUtils.mkdir_p(dirname) unless File.directory?(dirname)

File.open(all_tfs_filename, File::CREAT | File::TRUNC | File::RDWR) do |all_tfs_file|
  debug("copying TF files as they are")
  Dir.glob("#{terraforms_dir}/*.tf") do |tf_filename|
    debug("... appending #{tf_filename}")
    all_tfs_file.write(File.read(tf_filename))
  end

  debug("processing templates")
  Dir.glob("#{terraforms_dir}/*.tf.erb") do |template|
    debug("... appending #{template}")
    begin
      all_tfs_file.write($vars.render(template))
    rescue SyntaxError => e
      abort("when processing #{template}: #{e}")
    end
  end
end

cmd = ([$terraform_path] + ARGV).join(" ")
debug("running: '#{cmd}'")
Dir.chdir(work_dir)
exec(cmd)
